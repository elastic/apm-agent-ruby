#!/usr/bin/env groovy
@Library('apm@current') _

import co.elastic.matrix.*
import groovy.transform.Field

/**
 This is required to store the results of the tests.
*/
@Field def rubyTasksFailed = false

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-agent-ruby'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    PIPELINE_LOG_LEVEL='DEBUG'
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    CODECOV_SECRET = 'secret/apm-team/ci/apm-agent-ruby-codecov'
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    GITHUB_CHECK_ITS_NAME = 'Integration Tests'
    ITS_PIPELINE = 'apm-integration-tests-selector-mbp/master'
    RELEASE_SECRET = 'secret/apm-team/ci/apm-agent-ruby-rubygems-release'
    OPBEANS_REPO = 'opbeans-ruby'
  }
  options {
    timeout(time: 2, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  parameters {
    booleanParam(name: 'Run_As_Master_Branch', defaultValue: false, description: 'Allow to run any steps on a PR, some steps normally only run on master branch.')
    booleanParam(name: 'bench_ci', defaultValue: true, description: 'Enable run benchmarks.')
  }
  stages {
    /**
    Checkout the code and stash it, to use it on other stages.
    */
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Sanity checks') {
      when {
        beforeAgent true
        anyOf {
          not { changeRequest() }
          expression { return params.Run_As_Master_Branch }
        }
      }
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.WORKSPACE}/bin:${env.PATH}"
      }
      steps {
        withGithubNotify(context: 'Sanity checks') {
          deleteDir()
          unstash 'source'
          dir(BASE_DIR) {
            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE', message: 'Sanity checks failed but keep running the build') {
              preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
            }
          }
        }
      }
    }
    /**
    Execute unit tests.
    */
    stage('Test') {
      options { skipDefaultCheckout() }
      steps {
        withGithubNotify(context: 'Tests', tab: 'tests') {
          deleteDir()
          unstash "source"
          dir("${BASE_DIR}"){
            script {
              def ruby = readYaml(file: '.ci/.jenkins_ruby.yml')
              def testTasks = [:]
              ruby['RUBY_VERSION'].each{ rubyVersion ->
                testTasks[rubyVersion] = { runJob(rubyVersion) }
              }
              parallel(testTasks)
              }
            }
          }
        }
      }
      stage('Benchmarks') {
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          allOf {
            anyOf {
              branch 'master'
              branch "\\d+\\.\\d+"
              branch "v\\d?"
              tag "v\\d+\\.\\d+\\.\\d+*"
              expression { return params.Run_As_Master_Branch }
            }
            expression { return params.bench_ci }
          }
        }
        stages {
          stage('Clean Workspace') {
            agent { label 'metal' }
            steps {
              echo "Cleaning Workspace"
            }
            post {
              always {
                cleanWs()
              }
            }
          }
          /**
            Run the benchmarks and store the results on ES.
            The result JSON files are also archive into Jenkins.
          */
          stage('Run Benchmarks') {
            steps {
              withGithubNotify(context: 'Run Benchmarks') {
                deleteDir()
                unstash 'source'
                dir("${BASE_DIR}"){
                  script {
                    def versions = readYaml(file: ".ci/.jenkins_ruby.yml")
                    def benchmarkTask = [:]
                    // TODO: benchmark for the jruby:9.2 and similar versions got some issues with
                    //       NoMethodError: undefined method `[]' for nil:NilClass
                    //      <main> at bench/report.rb:48
                    versions['RUBY_VERSION'].findAll { !it.contains('9.2') }.each{ v ->
                      benchmarkTask[v] = runBenchmark(v)
                    }
                    parallel(benchmarkTask)
                  }
                }
              }
            }
          }
        }
      }
      stage('Populate Test failures') {
        when {
          expression { return rubyTasksFailed }
        }
        steps {
          error('There were some failures when running the "Test" stage')
        }
      }
      stage('Integration Tests') {
        agent none
        when {
          beforeAgent true
          anyOf {
            changeRequest()
            expression { return !params.Run_As_Master_Branch }
          }
        }
        steps {
          log(level: 'INFO', text: 'Launching Async ITs')
          build(job: env.ITS_PIPELINE, propagate: false, wait: false,
                parameters: [string(name: 'AGENT_INTEGRATION_TEST', value: 'Ruby'),
                             string(name: 'BUILD_OPTS', value: "--ruby-agent-version ${env.GIT_BASE_COMMIT} --ruby-agent-version-state ${env.GIT_BUILD_CAUSE} --ruby-agent-repo ${env.CHANGE_FORK?.trim() ?: 'elastic'}/${env.REPO}"),
                             string(name: 'GITHUB_CHECK_NAME', value: env.GITHUB_CHECK_ITS_NAME),
                             string(name: 'GITHUB_CHECK_REPO', value: env.REPO),
                             string(name: 'GITHUB_CHECK_SHA1', value: env.GIT_BASE_COMMIT)]
          )
          githubNotify(context: "${env.GITHUB_CHECK_ITS_NAME}", description: "${env.GITHUB_CHECK_ITS_NAME} ...", status: 'PENDING', targetUrl: "${env.JENKINS_URL}search/?q=${env.ITS_PIPELINE.replaceAll('/','+')}")
        }
      }
      stage('Release') {
        options { skipDefaultCheckout() }
        environment {
          RUBY_DOCKER_TAG = 'ruby:2.6'
          HOME = '/var/lib/jenkins'
        }
        when {
          beforeAgent true
          tag pattern: 'v\\d+.*', comparator: 'REGEXP'
        }
        stages {
          stage('Release') {
            steps {
              withGithubNotify(context: 'Release') {
                deleteDir()
                unstash 'source'
                script {
                  dir(BASE_DIR){
                    docker.image("${env.RUBY_DOCKER_TAG}").inside('-v /etc/passwd:/etc/passwd -v ${HOME}/.ssh:${HOME}/.ssh') {
                      withEnv(["HOME=${env.WORKSPACE}/${env.BASE_DIR ?: ''}"]) {
                        rubygemsLogin.withApi(secret: "${env.RELEASE_SECRET}") {
                          sshagent(['f6c7695a-671e-4f4f-a331-acdce44ff9ba']) {
                            sh '.ci/prepare-git-context.sh'
                            sh 'gem install rake yard rspec'
                            sh 'rake release'
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          stage('Opbeans') {
            environment {
              REPO_NAME = "${OPBEANS_REPO}"
            }
            steps {
              deleteDir()
              dir("${OPBEANS_REPO}"){
                git credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
                    url: "git@github.com:elastic/${OPBEANS_REPO}.git"
                sh script: ".ci/bump-version.sh ${env.BRANCH_NAME}", label: 'Bump version'
                // The opbeans pipeline will trigger a release for the master branch
                gitPush()
                // The opbeans pipeline will trigger a release for the release tag
                gitCreateTag(tag: "${env.BRANCH_NAME}")
              }
            }
          }
        }
      }
    }
    post {
      cleanup {
        notifyBuildResult()
      }
    }
  }

/**
  Run benchmarks for a Ruby version, then report the results to the Elasticsearch server.
*/
def runBenchmark(version){
  return {
    node('metal'){
      // Transform the versions like:
      //  - docker.elastic.co/observability-ci/jruby:9.2-12-jdk to jruby-9.2-12-jdk
      //  - jruby:9.1 to jruby-9.1
      def transformedVersion = version.replaceAll('.*/', '').replaceAll(':', '-')
      env.HOME = "${env.WORKSPACE}/${transformedVersion}"
      dir("${transformedVersion}"){
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          retry(2){
            sleep randomNumber(min:10, max: 30)
            dockerLogin(secret: "${DOCKER_SECRET}", registry: "${DOCKER_REGISTRY}")
          }
          try{
            sh "./spec/scripts/benchmarks.sh ${version}"
          } catch(e){
            throw e
          } finally {
            archiveArtifacts(
              allowEmptyArchive: true,
              artifacts: "**/benchmark-${transformedVersion}.raw,**/benchmark-${transformedVersion}.error",
              onlyIfSuccessful: false)
            sendBenchmarks(file: "benchmark-${transformedVersion}.bulk",
              index: "benchmark-ruby", archive: true)
          }
        }
      }
    }
  }
}

def runJob(rubyVersion){
  try {
    build( job: "apm-agent-ruby/apm-agent-ruby-downstream/${env.BRANCH_NAME}",
      parameters: [
        string(name: 'RUBY_VERSION', value: "${rubyVersion}"),
        string(name: 'BRANCH_SPECIFIER', value: "${env.GIT_BASE_COMMIT}")
      ],
      quietPeriod: 15
    )
  } catch(e) {
    rubyTasksFailed = true
    warnError('Test Failures') {
      error("Downstream job for '${rubyVersion}' failed")
    }
  }
}
