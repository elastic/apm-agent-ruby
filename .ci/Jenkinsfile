#!/usr/bin/env groovy
@Library('apm@current') _

import co.elastic.matrix.*
import groovy.transform.Field

/**
 This is required to know if there any failures when running the downstream jobs.
*/
@Field def rubyTasksFailed = false

/**
 This is required to store the build status for the downstream jobs.
*/
@Field def rubyDownstreamJobs = [:]

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-agent-ruby'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    PIPELINE_LOG_LEVEL='DEBUG'
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    CODECOV_SECRET = 'secret/apm-team/ci/apm-agent-ruby-codecov'
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    GITHUB_CHECK_ITS_NAME = 'Integration Tests'
    ITS_PIPELINE = 'apm-integration-tests-selector-mbp/master'
    RELEASE_SECRET = 'secret/apm-team/ci/apm-agent-ruby-rubygems-release'
    OPBEANS_REPO = 'opbeans-ruby'
    REFERENCE_REPO = '/var/lib/jenkins/.git-references/apm-agent-ruby.git'
  }
  options {
    timeout(time: 2, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  parameters {
    booleanParam(name: 'Run_As_Master_Branch', defaultValue: false, description: 'Allow to run any steps on a PR, some steps normally only run on master branch.')
    booleanParam(name: 'bench_ci', defaultValue: true, description: 'Enable run benchmarks.')
  }
  stages {
    /**
    Checkout the code and stash it, to use it on other stages.
    */
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true, reference: "${env.REFERENCE_REPO}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Release') {
      options { skipDefaultCheckout() }
      environment {
        RUBY_DOCKER_TAG = 'ruby:2.6'
        HOME = '/var/lib/jenkins'
      }
      stages {
        stage('Release') {
          steps {
            deleteDir()
            unstash 'source'
            prepareRelease(){
              sh 'git config -l'
            }
          }
        }
      }        
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def prepareRelease(Closure body){
  dir("${env.BASE_DIR}"){
    docker.image("${env.RUBY_DOCKER_TAG}").inside('-v ${REFERENCE_REPO}:${REFERENCE_REPO} -v /etc/passwd:/etc/passwd -v ${HOME}/.ssh:${HOME}/.ssh') {
      withEnv(["HOME=${env.WORKSPACE}/${env.BASE_DIR ?: ''}"]) {
        rubygemsLogin.withApi(secret: "${env.RELEASE_SECRET}") {
          withGitRelease(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7-UserAndToken') {
            sh 'gem install rake yard rspec'
            body()
          }
        }
      }
    }
  }
}
