[[configuration]]
== Configuration

There are several ways to configure how Elastic APM behaves.

The recommended way to configure Elastic APM is to create a file
`config/elastic_apm.yml` and specify options in there:

[source,yaml]
----
---
server_url: 'http://localhost:8200'
secret_token: 'very_very_secret'
----

Options are applied in the following order (last one wins):

1. Defaults
2. Arguments to `ElasticAPM.start` / `Config.new`
3. Config file eg. `config/elastic_apm.yml`
4. Environment variables

[float]
=== Ruby on Rails

When using Rails it's also possible to specify options inside
`config/application.rb`:

[source,ruby]
----
# config/application.rb
config.elastic_apm.service_name = 'MyApp'
----

[float]
=== Sinatra and Rack

When using APM with Sinatra and Rack you can configure it when starting
the agent:

[source,ruby]
----
# config.ru or similar
ElasticAPM.start(
  app: MyApp,
  service_name: 'SomeOtherName'
)
----

See <<getting-started-rack>>.

[float]
=== Options

Some options can be set with `ENV` variables and all of them may be set in
your source code.

When setting values for lists using `ENV` variables, strings are split by comma
eg `ELASTIC_APM_ENBALED_ENVIRONMENTS=development,production`.

[float]
[[config-config-file]]
==== `config_file`

[options="header"]
|============
| Environment               | `Config` key  | Default
| `ELASTIC_APM_CONFIG_FILE` | `config_file` | `config/elastic_apm.yml`
|============

Path to the configuration Yaml-file.
Elastic APM will load config options from this if the file exists.

[float]
[[config-server-url]]
==== `server_url`

[options="header"]
|============
| Environment              | `Config` key   | Default
| `ELASTIC_APM_SERVER_URL` | `server_url`   | `'http://localhost:8200'`
|============

The URL for your APM Server.
The URL must be fully qualified, including protocol (`http` or `https`)
and port.

[float]
[[config-secret-token]]
==== `secret_token`

[options="header"]
|============
| Environment                | `Config` key    | Default | Example
| `ELASTIC_APM_SECRET_TOKEN` | `secret_token`  | `nil`   | A random string
|============

This string is used to ensure that only your agents can send data to your APM server.
Both the agents and the APM server have to be configured with the same secret token.
One example to generate a secure secret token is:

[source,bash]
----
ruby -r securerandom -e 'print SecureRandom.uuid'
----

WARNING: Secret tokens only provide any real security if your APM server use TLS.

[float]
[[config-service-name]]
==== `service_name`

[options="header"]
|============
| Environment                | `Config` key   | Default    | Example
| `ELASTIC_APM_SERVICE_NAME` | `service_name` | App's name | `MyApp`
|============

The name of your service.
This is used to keep all the errors and transactions of your service together and is
the primary filter in the Elastic APM user interface.

If you're using Ruby on Rails this will default to your app's name.
If you're using Sinatra it will default to the name of your app's class.

NOTE: The service name must conform to this regular expression: `^[a-zA-Z0-9 _-]+$`.
In less regexy terms: Your service name must only contain characters from the ASCII
alphabet, numbers, dashes, underscores and spaces.

[float]
[[config-service-version]]
==== `service_version`
[options="header"]
|============
| Environment                    | `Config` key      | Default   | Example
| `ELASTIC_APM_SERVICE_VERSION`  | `service_version` | `git` sha | A string indicating the version of the deployed service
|============

Deployed version of your service.
Defaults to `git rev-parse --verify HEAD`.

[float]
[[config-environment]]
==== `environment`

[options="header"]
|============
| Environment               | `Config` key   | Default    | Example
| `ELASTIC_APM_ENVIRONMENT` | `environment`  | From `ENV` | `"production"`
|============

The name of the environment this service is deployed in,
e.g. "production" or "staging".

Defaults to `ENV['RAILS_ENV'] || ENV['RACK_ENV']`.

[float]
[[config-enabled-environments]]
==== `enabled-environments`

[options="header"]
|============
| Environment                        | `Config` key           | Default
| `ELASTIC_APM_ENABLED_ENVIRONMENTS` | `enabled_environments` | `['production']`
|============

Specify which environments to enable APM in.

If the current envrironment isn't included, the agent will effectively be a _noop_
and do nothing.
So you can keep in your custom instrumentation code without the agent sending
anything nor complain.

[float]
[[config-framework-name]]
==== `framework_name`
[options="header"]
|============
| Environment                  | `Config` key     | Default
| `ELASTIC_APM_FRAMEWORK_NAME` | `framework_name` | Depending on framework
|============

Name of the used framework.
For Rails or Sinatra, this defaults to `Ruby on Rails` and `Sinatra` respectively,
otherwise defaults to `nil`.

[float]
[[config-framework-version]]
==== `framework_version`
[options="header"]
|============
| Environment                     | `Config` key        | Default
| `ELASTIC_APM_FRAMEWORK_VERSION` | `framework_version` | Depending on framework
|============

Version number of the used framework.
For Ruby on Rails and Sinatra, this defaults to the used version of the framework,
otherwise, the default is `nil`.

[float]
[[config-hostname]]
==== `hostname`

[options="header"]
|============
| Environment                | `Config` key  | Default    | Example
| `ELASTIC_APM_HOSTNAME`     | `hostname`    | `hostname` | `app-server01.example.com`
|============

The host name to use when sending error and transaction data to the APM server.

[float]
[[config-log-path]]
==== `log_path`

[options="header"]
|============
| Environment            | `Config` key | Default | Example
| `ELASTIC_APM_LOG_PATH` | `log_path`   | `nil`   | `log/elastic_apm.log`
|============

A path to a log file.

By default Elastic APM logs to `stdout` or uses `Rails.log` when used with Rails.

Should support both absolute and relative paths. Just make sure the directory exists.

[float]
[[config-log-level]]
==== `log_level`

[options="header"]
|============
| Environment             | `Config` key | Default
| `ELASTIC_APM_LOG_LEVEL` | `log_level`  | `Logger::DEBUG # => 0`
|============

By default Elastic APM logs to `stdout` or uses `Rails.log` when used with Rails.

[float]
[[config-logger]]
==== `logger`

[options="header"]
|============
| Environment | `Config` key | Default | Example
| N/A         | `logger`     | Depends | `Logger.new('path/to_file.log')`
|============

By default Elastic APM logs to `stdout` or uses `Rails.log` when used with Rails.

Use this to provide another logger. Expected to have the same API as Ruby's built-in `Logger`.

[float]
[[config-source-lines-error-app-frames]]
==== `source_lines_error_app_frames`
[float]
[[config-source-lines-error-library-frames]]
==== `source_lines_error_library_frames`
[float]
[[config-source-lines-span-app-frames]]
==== `source_lines_span_app_frames`
[float]
[[config-source-lines-span-library-frames]]
==== `source_lines_span_library_frames`

|============
| Environment                                     | `Config` key                        | Default
| `ELASTIC_APM_SOURCE_LINES_ERROR_APP_FRAMES`     | `source_lines_error_app_frames`     | `5`
| `ELASTIC_APM_SOURCE_LINES_ERROR_LIBRARY_FRAMES` | `source_lines_error_library_frames` | `5`
| `ELASTIC_APM_SOURCE_LINES_SPAN_APP_FRAMES`      | `source_lines_span_app_frames`      | `0`
| `ELASTIC_APM_SOURCE_LINES_SPAN_LIBRARY_FRAMES`  | `source_lines_span_library_frames`  | `0`
|============

By default, the APM agent collects source code snippets for errors.
With the above settings, you can modify how many lines of source code is collected.

We differ between errors and spans, as well as library frames and app frames.

WARNING: Especially for spans, collecting source code can have a large impact on
storage use in your Elasticsearch cluster.

[float]
[[config-span-frames-min-duration-ms]]
==== `span_frames_min_duration`

|============
| Environment                            | `Config` key               | Default
| `ELASTIC_APM_SPAN_FRAMES_MIN_DURATION` | `span_frames_min_duration` | `5`
|============

Use this to disable stacktrace collection for spans with a duration shorter than or equal to the given amount of milleseconds.

The default is 5ms.

Set it to `-1` to disable the feature and collect stack traces for all spans.
Setting it to a positive value, e.g. `5`, will limit stack trace collection to spans
with durations equal or longer than the given value in milliseconds, e.g. 5 milliseconds.

To disable stack trace collection for spans completely, set the value to `0`.

[float]
[[config-max-queue-size]]
==== `max_queue_size`

|============
| Environment                  | `Config` key     | Default
| `ELASTIC_APM_MAX_QUEUE_SIZE` | `max_queue_size` | `500`
|============

Maximum queue length of transactions before sending transactions to the APM server.
A lower value will increase the load on your APM server,
while a higher value can increase the memory pressure of your app.
A higher value also impacts the time until transactions are indexed and searchable
in Elasticsearch.

This setting is useful to limit memory consumption if you experience a sudden spike
of traffic.

[float]
[[config-flush-interval]]
==== `flush_interval`

|============
| Environment                  | `Config` key     | Default
| `ELASTIC_APM_FLUSH_INTERVAL` | `flush_interval` | `10`
|============

Interval with which transactions should be sent to the APM server, in seconds.
A lower value will increase the load on your APM server,
while a higher value can increase the memory pressure on your app.
A higher value also impacts the time until transactions are indexed and searchable
in Elasticsearch.

[float]
[[config-transaction-sample-rate]]
==== `transaction_sample_rate`

|============
| Environment                           | `Config` key              | Default
| `ELASTIC_APM_TRANSACTION_SAMPLE_RATE` | `transaction_sample_rate` | `1.0`
|============

By default, the agent will sample every transaction (e.g. request to your service).
To reduce overhead and storage requirements, you can set the sample rate to a value
between `0.0` and `1.0`.
We still record overall time and the result for unsampled transactions, but no
context information, tags, or spans.

[float]
[[config-transaction-max-spans]]
==== `transaction_max_spans`

|============
| Environment                         | `Config` key            | Default
| `ELASTIC_APM_TRANSACTION_MAX_SPANS` | `transaction_max_spans` | `500`
|============

Limits the amount of spans that are recorded per transaction.
This is helpful in cases where a transaction creates a very high amount of spans
(e.g. thousands of SQL queries).
Setting an upper limit will prevent overloading the agent and the APM server with
too much work for such edge cases.

[float]
[[config-verify-server-cert]]
==== `verify_server_cert`
|============
| Environment                       | `Config` key         | Default
| `ELASTIC_APM_VERIFY_SERVER_CERT`  | `verify_server_cert` | `true`
|============

By default, the agent verifies the SSL certificate if you use an HTTPS connection to
the APM server.
Verification can be disabled by changing this setting to `false`.

[float]
[[config-disabled-spies]]
==== `disabled_spies`

[options="header"]
|============
| Environment                  | `Config` key     | Default
| `ELASTIC_APM_DISABLED_SPIES` | `disabled_spies` | `['json']`
|============

Elastic APM automatically instruments select third party libraries.
Use this option to disable any of these.

Get an array of enabled spies with `ElasticAPM.agent.config.enabled_spies`.

[float]
[[config-default-tags]]
==== `default_tags`

[options="header"]
|============
| Environment                | `Config` key   | Default | Example
| `ELASTIC_APM_DEFAULT_TAGS` | `default_tags` | `{}`    | `region=us1`
|============

Add default tags to add to every transaction.

WARNING: Be aware that tags are indexed in Elasticsearch. Using too many unique keys will result in *https://www.elastic.co/blog/found-crash-elasticsearch#mapping-explosion[Mapping explosion]*.

[float]
[[config-custom-key-filters]]
==== `custom_key_filters`
[options="header"]
|============
| Environment                      | `Config` key         | Default | Example
| `ELASTIC_APM_CUSTOM_KEY_FILTERS` | `custom_key_filters` | `[]`    | `['MyAuthHeader']`
|============

Elastic APM strips
https://github.com/elastic/apm-agent-ruby/blob/1.x/lib/elastic_apm/filters/secrets_filter.rb[
what looks like confidential information] from the request/response headers.
Use this option to add your own custom header keys to the list of filtered keys.

When setting this option via `ENV`, use a comma separated string.
Eg. `ELASTIC_APM_CUSTOM_KEY_FILTERS="a,b" # => [/a/, /b/]`

[float]
[[config-custom-ignore-url-patterns]]
==== `ignore_url_patterns`
[options="header"]
|============
| Environment                       | `Config` key          | Default | Example
| `ELASTIC_APM_IGNORE_URL_PATTERNS` | `ignore_url_patterns` | `[]`    | `['^/ping', %r{^/admin}]`
|============

Use this option to ignroe certain URL patterns eg. healthchecks or admin sections.

_Ignoring_ in this context means _don't wrap in a <<api-transaction,Transaction>>_.
Errors will still be reported.

When setting this option via `ENV`, use a comma separated string.
Eg. `ELASTIC_APM_IGNORE_URL_PATTERNS="a,b" # => [/a/, /b/]`

[float]
[[config-filter-exception-types]]
==== `filter_exception_types`
|============
| Environment | `Config` key             | Default | Example
| N/A         | `filter_exception_types` | `[]`    | `[MyApp::Errors::IgnoredError]`
|============

Use this to filter error tracking for specific error constants.

[float]
[[config-disable-send]]
==== `disable_send`
|============
| Environment | `Config` key   | Default
| N/A         | `disable_send` | `false`
|============

Disables sending payloads to APM Server.

